Question: https://leetcode.com/problems/majority-element/
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

---------------------------------------------------------------------------------------------------
Solution:
Method 1)
// Without Map ( Boyer-Moore voting system)
int majorityElement(vector<int>& num) {
    int major=num[0], count = 1;
    for(int i=1; i<num.size();i++){
        if(count==0){
            count++;
            major=num[i];
        }else if(major==num[i]){
            count++;
        }else{
            count--;
        } 
    }
    return major;
}

Method 2)
// Using Map
 int majorityElement(vector<int>& nums) {
     unordered_map<int,int> m;
     int n=nums.size();
     for(int i=0;i<n;i++){
         m[nums[i]]++;
         if(m[nums[i]]>n/2){
             return nums[i];
         }
     }
     return -1;
 }
